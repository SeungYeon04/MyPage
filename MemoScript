
using System.Collections;
using Unity.VisualScripting;
using Unity.VisualScripting.Dependencies.Sqlite;
using UnityEngine;

public class NPCController : MonoBehaviour
{
   
    public Transform player;
    public Transform NPCform1;

    public Animator animator;
    public float moveSpeed = 10f;
    public Vector3 targetPosition;

    public int WalkCount;
    private int currentWalkCount = 0; 
    private bool canMove = true; //이동 끊기기 
    
    IEnumerator MoveCoroutine()
    {
        yield return new WaitForSeconds(1f); //1초 대기 대기명령 코루틴 

        while (currentWalkCount < WalkCount)
        {
            currentWalkCount++; 

            if (canMove)
            {
                if (Input.GetKey(KeyCode.P)) //P누르면 NPC 왓슨이 홈즈 따라간다 조건은 바꾸면 된다. 
                {
                    float HYform = 0f;
                    float HXform = 0f;

                    animator.SetBool("Walking", true);

                    Vector3 directionToPlayer = (player.position - transform.position);

                    if (Mathf.Abs(directionToPlayer.y) > 0.1f) // y 방향으로의 거리가 0.1f보다 큰 경우
                    {
                        // y 축으로 이동
                        HYform = Mathf.Clamp(directionToPlayer.y, -1f, 1f);
                    }
                    else if (Mathf.Abs(directionToPlayer.x) > 0.1f) // x 방향으로의 거리가 0.1f보다 큰 경우
                    {
                        // x 축으로 이동
                        HXform = Mathf.Clamp(directionToPlayer.x, -1f, 1f);

                    }

                    Vector3 movement = new Vector3(HXform, HYform, 0f);
                    transform.position += movement * moveSpeed * Time.deltaTime;

                    Debug.Log("P입력");
                }
                yield return new WaitForSeconds(1f);
                currentWalkCount = 0;

                if (Input.GetKey(KeyCode.L))
                {
                    Vector3 directionNPCTarget = (NPCform1.position - transform.position);

                    float Yform = 0f;
                    float Xform = 0f;

                    if (Mathf.Abs(directionNPCTarget.y) > 0.1f) // y 방향으로의 거리가 0.1f보다 큰 경우
                    {
                        Yform = Mathf.Clamp(directionNPCTarget.y, -1f, 1f); // y 축으로 이동 
                    }
                    else if (Mathf.Abs(directionNPCTarget.x) > 0.1f) // x 방향으로의 거리가 0.1f보다 큰 경우
                    {
                        Xform = Mathf.Clamp(directionNPCTarget.x, -1f, 1f); // x 축으로 이동 
                    }

                    Vector3 movement = new Vector3(Xform, Yform, 0f);

                    transform.position += movement * moveSpeed * Time.deltaTime;

                    Debug.Log("L입력");
                }
                else
                {
                    // 이동할 필요가 없으므로 걷는 애니메이션을 재생하지 않음
                    animator.SetBool("Walking", false);
                }
            Debug.Log("currentWalkCount = " + currentWalkCount);
            Debug.Log("canMove = " + canMove);
            Debug.Log("WalkCount = " + WalkCount);
            yield return new WaitForSeconds(1f);
            currentWalkCount = 0;
            }


        }


    }
 
    void Update()
    {
        if (canMove)
        {
            if (Input.GetKey(KeyCode.P) || (Input.GetKey(KeyCode.L)))
            {
                StartCoroutine(MoveCoroutine());
            }
        }
    }
}
